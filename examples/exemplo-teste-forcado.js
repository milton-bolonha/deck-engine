/**
 * üîß Teste For√ßado - Garantir que o processo pare
 */

const DeckEngine = require("./index");

async function testeForcado() {
  console.log("üîß Teste For√ßado - Sistema que PARA garantido!\n");

  try {
    const engine = new DeckEngine({ version: "v2" });
    console.log("‚úÖ Engine criado");

    // Criar deck simples
    const deck = engine.createDeck("teste-forcado");
    deck.addCard("hello", async (context) => {
      console.log("üëã Hello World!");
      return { ...context, message: "Hello World!" };
    });

    console.log("‚úÖ Deck criado");

    // Executar
    const resultado = await engine.playAndWait("teste-forcado", { test: true });
    console.log("‚úÖ Execu√ß√£o:", resultado.success ? "SUCESSO" : "ERRO");

    // Shutdown completo
    console.log("\nüõë Iniciando shutdown...");
    await engine.shutdown();
    console.log("‚úÖ Engine shutdown conclu√≠do");

    // For√ßa parada IMEDIATA
    console.log("üî• For√ßando encerramento do processo...");

    // Timer de seguran√ßa - se n√£o parar em 2s, for√ßa sa√≠da
    const forceExit = setTimeout(() => {
      console.log("‚ö†Ô∏è For√ßando sa√≠da ap√≥s timeout!");
      process.exit(0);
    }, 2000);

    // Limpar timer se conseguir sair normalmente
    clearTimeout(forceExit);

    console.log("üëã Processo finalizado!");
    process.exit(0);
  } catch (error) {
    console.error("‚ùå Erro:", error.message);
    process.exit(1);
  }
}

// Executar
testeForcado();
