const puppeteer = require("puppeteer");
const fs = require("fs");

async function testCorre√ß√µes() {
  console.log("üîß Verificando corre√ß√µes implementadas...");

  const browser = await puppeteer.launch({
    headless: false,
    defaultViewport: { width: 1280, height: 720 },
    args: ["--no-sandbox", "--disable-setuid-sandbox"],
  });

  const page = await browser.newPage();
  const timestamp = new Date().toISOString().replace(/[:.]/g, "-");

  // Capturar erros da p√°gina
  const pageErrors = [];
  page.on("pageerror", (error) => {
    pageErrors.push(error.message);
    console.error("‚ùå Erro de p√°gina:", error.message);
  });

  page.on("console", (msg) => {
    if (msg.type() === "error") {
      console.log(`üîç Console Error: ${msg.text()}`);
    }
  });

  try {
    // Aguardar um tempo para o servidor inicializar
    console.log("‚è≥ Aguardando servidor inicializar...");
    await new Promise((resolve) => setTimeout(resolve, 5000));

    console.log("üåê Navegando para o dashboard...");
    await page.goto("http://localhost:3000", {
      waitUntil: "networkidle0",
      timeout: 30000,
    });

    await page.waitForTimeout(3000);

    // Verificar se a p√°gina carregou
    const title = await page.title();
    console.log(`üìÑ T√≠tulo da p√°gina: ${title}`);

    // Screenshot inicial
    await page.screenshot({
      path: `outputs/screenshots/2025-06/dashboard-test-inicial-${timestamp}.png`,
      fullPage: true,
    });

    const resultados = [];

    // Teste 1: Verificar se n√£o h√° o erro fatal de contentType.fields
    console.log("\nüîç Teste 1: Verificando erro fatal contentType.fields...");
    const hasFatalError = pageErrors.some((error) =>
      error.includes("Cannot read properties of undefined (reading 'fields')")
    );

    if (!hasFatalError) {
      console.log("‚úÖ PASSOU: N√£o h√° erro fatal de contentType.fields");
      resultados.push({ teste: "contentType.fields", status: "‚úÖ PASSOU" });
    } else {
      console.log("‚ùå FALHOU: Ainda h√° erro fatal de contentType.fields");
      resultados.push({ teste: "contentType.fields", status: "‚ùå FALHOU" });
    }

    // Teste 2: Verificar navega√ß√£o no menu
    console.log("\nüîç Teste 2: Testando navega√ß√£o no menu...");
    try {
      // Procurar se√ß√£o Blog
      await page.waitForSelector("nav", { timeout: 5000 });
      const blogButton = await page.$x("//button[contains(text(), 'Blog')]");

      if (blogButton.length > 0) {
        await blogButton[0].click();
        await page.waitForTimeout(2000);

        console.log("‚úÖ PASSOU: Conseguiu navegar para Blog");
        resultados.push({ teste: "navegacao_blog", status: "‚úÖ PASSOU" });
      } else {
        console.log("‚ö†Ô∏è AVISO: Bot√£o Blog n√£o encontrado");
        resultados.push({ teste: "navegacao_blog", status: "‚ö†Ô∏è AVISO" });
      }
    } catch (error) {
      console.log("‚ùå FALHOU: Erro na navega√ß√£o:", error.message);
      resultados.push({ teste: "navegacao_blog", status: "‚ùå FALHOU" });
    }

    // Teste 3: Verificar SectionMaster
    console.log("\nüîç Teste 3: Verificando SectionMaster...");
    try {
      const sectionMasterButton = await page.$x(
        "//button[contains(text(), 'SectionMaster')]"
      );

      if (sectionMasterButton.length > 0) {
        await sectionMasterButton[0].click();
        await page.waitForTimeout(2000);

        console.log("‚úÖ PASSOU: Conseguiu acessar SectionMaster");
        resultados.push({ teste: "sectionmaster_acesso", status: "‚úÖ PASSOU" });
      } else {
        console.log("‚ö†Ô∏è AVISO: SectionMaster n√£o encontrado");
        resultados.push({ teste: "sectionmaster_acesso", status: "‚ö†Ô∏è AVISO" });
      }
    } catch (error) {
      console.log("‚ùå FALHOU: Erro no SectionMaster:", error.message);
      resultados.push({ teste: "sectionmaster_acesso", status: "‚ùå FALHOU" });
    }

    // Screenshot final
    await page.screenshot({
      path: `outputs/screenshots/2025-06/dashboard-test-final-${timestamp}.png`,
      fullPage: true,
    });

    // Relat√≥rio final
    console.log("\nüìä RELAT√ìRIO FINAL DE CORRE√á√ïES:");
    console.log("=".repeat(50));

    resultados.forEach((resultado) => {
      console.log(`${resultado.status} ${resultado.teste}`);
    });

    const passou = resultados.filter((r) => r.status.includes("‚úÖ")).length;
    const total = resultados.length;

    console.log("\nüìà RESUMO:");
    console.log(`   Testes que passaram: ${passou}/${total}`);
    console.log(`   Taxa de sucesso: ${((passou / total) * 100).toFixed(1)}%`);

    if (pageErrors.length === 0) {
      console.log("\nüéâ EXCELENTE! Dashboard carregou sem erros fatais.");
    } else {
      console.log(`\n‚ö†Ô∏è Encontrados ${pageErrors.length} erros de p√°gina.`);
    }

    // Salvar relat√≥rio
    const relatorio = {
      timestamp,
      resultados,
      erros: pageErrors,
      resumo: {
        passou,
        total,
        taxa_sucesso: `${((passou / total) * 100).toFixed(1)}%`,
      },
    };

    fs.writeFileSync(
      `outputs/reports/2025-06/test-correcoes-${timestamp}.json`,
      JSON.stringify(relatorio, null, 2)
    );

    console.log(
      `\nüíæ Relat√≥rio salvo: outputs/reports/2025-06/test-correcoes-${timestamp}.json`
    );
  } catch (error) {
    console.error("\n‚ùå ERRO CR√çTICO:", error.message);
  } finally {
    await browser.close();
  }
}

testCorre√ß√µes().catch(console.error);
